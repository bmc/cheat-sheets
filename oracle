Installing 9.2.0 on Linux: 

- See http://www.puschitz.com/InstallingOracle9i.shtml
- Select "typical" when asked to configure Network Services
- When creating database, use the "New Database" template

---------------------------------------------------------------------------
Install of 8i on Linux: Link fails

	Must install stub library; glibc version is newer than one
	Oracle built with. See
	http://otn.oracle.com/software/products/oracle8i/files/READMEglib213.html

	I also had to manually link CTX (interMedia), by adding

	`cat /home/oracle/product/8.1.7/lib/sysliblist` -ldl -lm -lpthread

	to the "gcc" link line (courtesy of the sqlplus makefile)

---------------------------------------------------------------------------

Install of 8i on Linux: Java installer won't come up

	Use separate 1.1.8 Linux JDK (blackdown.org is fine). Then, manually
	run the command the installer runs. The below command seemed to work
	on RedHat 8.0.

		export JAVA_HOME=/usr/local/java/jdk118
		DISK1=/cdrom/Disk1
		$JAVA_HOME/bin/java \
		-Doracle.installer.library_loc=$DISK1/stage/Components/oracle.swd.oui/1.7.1.8.0/1/DataFiles/Expanded/bin/linux \
		-Doracle.installer.startup_location=$DISK1/install/linux$DISK1/ \
		-Doracle.installer.nlsEnabled="TRUE" \
		-Doracle.installer.unixVersion=2.4.18-14  \
		-mx250m \
		-classpath /tmp/OraInstall:\
		$JAVA_HOME/lib/classes.zip:\
		$DISK1/stage/Components/oracle.swd.oui/1.7.1.8.0/1/DataFiles/Expanded/lib/OraInstaller.jar:\
		$DISK1/stage/Components/oracle.swd.oui/1.7.1.8.0/1/DataFiles/Expanded/lib/InstImages.jar:\
		$DISK1/stage/Components/oracle.swd.oui/1.7.1.8.0/1/DataFiles/Expanded/lib/InstHelp.jar:\
		$DISK1/stage/Components/oracle.swd.oui/1.7.1.8.0/1/DataFiles/Expanded/lib/oracleice.jar:\
		$DISK1/stage/Components/oracle.swd.oui/1.7.1.8.0/1/DataFiles/Expanded/lib/help.jar:\
		$DISK1/stage/Components/oracle.swd.oui/1.7.1.8.0/1/DataFiles/Expanded/lib/ewt.jar:\
		$DISK1/stage/Components/oracle.swd.oui/1.7.1.8.0/1/DataFiles/Expanded/lib/xmlparser.jar:\
		$DISK1/stage/Components/oracle.swd.oui/1.7.1.8.0/1/DataFiles/Expanded/lib/swingaccess.jar oracle.sysman.oii.oiic.OiicInstaller \
		-scratchPath /tmp/OraInstall \
		-sourceLoc $DISK1/stage/products.jar \
		-sourceType network

	Note: The above got me further, but installation still didn't complete.
	See next item.

---------------------------------------------------------------------------

Install on Linux: Copying an existing Linux installation

	It's possible to install Oracle on Linux by copying an existing
	installation (e.g., over the network).

	WARNING: Do the copy (e.g., tar, cpio, whatever) as "oracle", 
	not "root". There's at least one file that even root can't read:

		$ORACLE_HOME/dbs/orapw*

	$ ls -l orapw*
	-rwSr-----    1 oracle   dba          1536 Jul 30 09:19 orapwiaccel

	If this file does not get copied, Oracle will not come up. (You
	can detect this error by trying a "startup force". See related
	section later in this cheat sheet.)

---------------------------------------------------------------------------

Getting a list of indexes:

        The query

                SELECT INDEX_NAME FROM DBA_INDEXES

        will list the names of all non-system indexes. Also, from
        http://technet.oracle.com/docs/products/oracle8i/doc_index.htm

                System index views USER_INDEXES, ALL_INDEXES, and
                DBA_INDEXES indicate bitmap indexes by the word BITMAP
                appearing in the TYPE column. A bitmap index cannot be
                declared as UNIQUE.

        Must have system privileges to issue the query.

---------------------------------------------------------------------------

Getting a cross-reference of tables and their indexes:

        SELECT table_name, index_name FROM dba_indexes
         WHERE table_name = 'TABLENAME';

        Must have system privileges to issue the query.

---------------------------------------------------------------------------

Determining the columns on which an index is based:

        SELECT index_name, table_name, column_name, column_length, descend
          FROM dba_ind_columns
         WHERE table_name = 'TABLENAME';

        e.g.: This query gives you the relevant information for all indexes
        defined on PRODUCTWORD:

        SELECT index_name, table_name, column_name, column_length, descend
          FROM dba_ind_columns
         WHERE table_name = 'PRODUCTWORD';

        Sample output, from my local database (via my JDBCTest program):

         INDEX_NAME        TABLE_NAME  COLUMN_NAME       COLUMN_LENGTH DESCEND
         ----------------- ----------- ----------------- ------------- -------
         XIF127PRODUCTWORD PRODUCTWORD PRODUCTWORD       40            ASC
         XIF128PRODUCTWORD PRODUCTWORD PRODUCTSEARCHWORD 4             ASC
         XIF129PRODUCTWORD PRODUCTWORD PRODUCTID         22            ASC

        "COLUMN_POSITION" can provide useful additional info, if the index is
        defined on more than one column.

        Must have system privileges to issue the query.

---------------------------------------------------------------------------

Creating a user

        1. In SQL*Plus, connect as SYSTEM/MANAGER@dbname

        2. Issue this command:

                CREATE USER user IDENTIFIED BY password
                DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp
                QUOTA UNLIMITED ON users;

          
           e.g.:

                CREATE USER iaccel IDENTIFIED BY iaccel
                DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp
                QUOTA UNLIMITED ON users;

        3. Grant appropriate privileges to the user:

                GRANT connect, resource TO iaccel;

        4. In SQL*Plus, connect as "user1/password@dbname"

        5. Create tables, indexes, etc... They'll be owned by iaccel

---------------------------------------------------------------------------

Changing user's password

	ALTER USER user IDENTIFIED BY password

---------------------------------------------------------------------------

Sharing tables between two users

        1. Create a second user, user2. (See above)

        2. Then, connect as user1.

        3. Issue this command:

                GRANT insert, update, delete, select on user1.table1
                TO user2;

           Do this for all appropriate tables/indexes.

        Now, if user2 logs in, he can access user1.table1, but he must
        refer to it as "user1.table1". You can create a public synonym for
        the table to make this easier. See below.

---------------------------------------------------------------------------

Creating a public synonym for a table

        1. Log in as the table's owner (user1, in this example)

        2. CREATE PUBLIC SYNONYM table1 FOR user1.table1.

---------------------------------------------------------------------------

Granting DBA privileges to a user

        In a word: Don't.

        Quoting Brett Bercich:

            I strongly recommend that you steer clear of the "sledgehammer"
            approach and do not "GRANT DBA to USERNAME" and then build
            everything in that schema. Also NEVER build your objects in the
            SYSTEM tablespace. The current security weakness in the
            FullTilt schema in the SF.com pilot database is admittedly the
            use of the SFCAT database user account. Instead of your Java
            app's logging into the database as the catalog schema owner (
            SFCAT ) you should actually be logging in under a separate DB
            account who only has the minimum object privileges to SELECT,
            INSERT, DELETE, UPDATE etc on the SFCAT objects. Say this user
            was called "FT_APP" :

            As a DBA user ( SYSTEM will do ) :

            1. CREATE USER ft_app IDENTIFIED BY fulltilt2go
               DEFAULT TABLESPACE users TEMPORARY TABLESPACE temp;

               Note that I do not grant quota because FT_APP user probably
               does not need to create any tables/indexes ( maybe you do
               create temp database tables in which case you would need the
               QUOTA clause ?? )

            2. GRANT create session TO ft_app;

            3. Connect as SFCAT/password in SQL*Plus :

                    GRANT select, insert, delete, update ( or whatever ) ON
                    SFCAT.ProductAttribute TO ft_app;

               You would do this for each and every table in the SFCAT
               (catalog owner) schema.

            4. Again, SFCAT would probably need to "CREATE PUBLIC SYNONYM
               productattribute FOR sfcat.productattribute" so that FT_APP
               could simply reference "PRODUCTATTRIBUTE" as opposed to
               "SFCAT.PRODUCTATTRIBUTE"

---------------------------------------------------------------------------

Creating a rollback segment:

	Connect as SYSTEM/MANAGER

		CREATE ROLLBACK SEGMENT segname TABLESPACE USERS;

	Then, add the rollback segment name to the initXXX.ora file
	for the instance.

---------------------------------------------------------------------------

If database is hung shutting down or starting up:

	- As Oracle user:

		$ svrmgrl
		Oracle8i Enterprise Edition Release 8.1.5.0.2 - Production
		With the Partitioning and Java options
		PL/SQL Release 8.1.5.0.0 - Production

		SVRMGR> connect internal
		SVRMGR> shutdown
		SVRMGR> startup force
		SVRMGR> ^D

	- If that fails, try killing the Oracle processes. Then (from
	  Zeke): Oracle uses two of the "three evil sisters", semaphores
	  and shared memory. "ipcrm" the Oracle-owned one after the "kill
	  -9" and it should restart.

---------------------------------------------------------------------------

Dumping and Restoring an Oracle Database

	- Dump:

	  sqlplus system/manager <<EOF
	  grant dba to iaccel;
	  EOF

	  exp iaccel/iaccel@iaccel	# accept defaults, except for
					# "Export entire database". Choose
					# "1" for that.

          When prompted with 

              (1)E(ntire database), (2)U(sers), or (3)T(ables): (2)U >

          accept the default ("U"), and enter the "iaccel" user name when
          prompted.

	  sqlplus system/manager <<EOF
	  revoke dba from iaccel;
	  EOF


	- Restore

	  Drop all existing tables and indexes in same db first.

	  sqlplus system/manager <<EOF
	  grant dba to iaccel;
	  EOF

	  imp iaccel/iaccel@iaccel

	  sqlplus system/manager <<EOF
	  revoke dba from iaccel;
	  EOF

	  May have to restore SYSTEM account's password afterwards.

---------------------------------------------------------------------------

Oracle 9.2.0 Intermedia Problems:

1. If this error occurs:

	PLS-00201: identifier 'CTX_DDL' must be declared

   then the user doesn't have appropriate privileges. This seems to cure
   the problem:

	sqlplus system/manager@iaccel <<EOF
	grant ctxapp to iaccel
	EOF

2. If the error occurs during definition of a stored procedure, then:

	sqlplus system/manager@iaccel <<EOF
	grant create any procedure to iaccel
	EOF

3. If you THEN get:

	PLS-00904: insufficient privilege to access object CTXSYS.CTX_DDL

   try:

	sqlplus system/manager@iaccel <<EOF
	grant execute on CTXSYS.CTX_DDL to iaccel;
	EOF

---------------------------------------------------------------------------

EXPLAIN PLAN and Autotrace

1. Create the relevant tables in the schema, e.g.:

	sqlplus iaccel/iaccel@iaccel @$ORACLE_HOME/rdbms/admin/utlxplan.sql

2. Create the PLUSTRACE role, etc.:

	sqlplus /nolog <<EOF
	connect / as sysdba
	@$ORACLE_HOME/sqlplus/admin/plustrce.sql
	EOF

3. Grant the PLUSTRACE role to the user who owns the DB:

	sqlplus system/manager@iaccel <<EOF
	grant plustrace to iaccel;
	EOF

4. Can now run EXPLAIN PLAN (see Oracle docs) or autotrace.

	sqlplus iaccel/iaccel@iaccel
	SQL> set autotrace trace|on|off
	SQL> <statement(s)>

   "trace" says to run the statement(s) and print the plan(s), but avoid
   displaying any results.
   "on" prints the plan(s) and the results.

---------------------------------------------------------------------------

Creating statistics for the cost-based optimizer:

	sqlplus system/manager@iaccel <<EOF
	EXEC DBMS_UTILITY.analyze_schema('IACCEL', 'COMPUTE')
	EOF

Deleting those statistics:

	sqlplus system/manager@iaccel <<EOF
	EXEC DBMS_UTILITY.analyze_schema('IACCEL', 'DELETE')
	EOF
---------------------------------------------------------------------------
After bringing up database, can't connect via SQL*Plus.

- Try waiting a minute or two.
